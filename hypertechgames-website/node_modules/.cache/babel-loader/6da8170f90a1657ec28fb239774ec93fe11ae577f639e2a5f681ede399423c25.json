{"ast":null,"code":"export const handleActiveNavigation = () => {\n  const sections = document.querySelectorAll('section[id]');\n  const navLinks = document.querySelectorAll('a[href^=\"#\"]');\n  const contactSection = document.getElementById('contact');\n\n  // Set initial active state for home\n  const homeLink = document.querySelector('a[href=\"#home\"]');\n  if (homeLink) {\n    homeLink.style.cssText = `\n      color: var(--primaryAccent) !important;\n      background: rgba(0, 245, 255, 0.1) !important;\n      transform: translateY(-2px) !important;\n      box-shadow: 0 4px 15px rgba(0, 245, 255, 0.3) !important;\n    `;\n  }\n  const observer = new IntersectionObserver(entries => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting) {\n        const id = entry.target.getAttribute('id');\n\n        // Remove active styles from all links\n        navLinks.forEach(link => {\n          link.style.cssText = '';\n        });\n\n        // Add active styles to current section link\n        const activeLink = document.querySelector(`a[href=\"#${id}\"]`);\n        if (activeLink) {\n          const isLight = document.documentElement.getAttribute('data-theme') === 'light';\n          if (isLight) {\n            activeLink.style.cssText = `\n              background: rgba(255, 255, 255, 0.1) !important;\n              box-shadow: 0 4px 15px rgba(255, 255, 255, 0.3) !important;\n              color: #ffffff !important;\n              transform: translateY(-2px) !important;\n            `;\n          } else {\n            activeLink.style.cssText = `\n              color: var(--primaryAccent) !important;\n              background: rgba(0, 245, 255, 0.1) !important;\n              transform: translateY(-2px) !important;\n              box-shadow: 0 4px 15px rgba(0, 245, 255, 0.3) !important;\n            `;\n          }\n        }\n\n        // Trigger contact section animation\n        if (id === 'contact' && contactSection) {\n          contactSection.classList.add('animate');\n        }\n      }\n    });\n  }, {\n    threshold: 0.6,\n    rootMargin: '-20% 0px -20% 0px'\n  });\n  sections.forEach(section => observer.observe(section));\n};","map":{"version":3,"names":["handleActiveNavigation","sections","document","querySelectorAll","navLinks","contactSection","getElementById","homeLink","querySelector","style","cssText","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","id","target","getAttribute","link","activeLink","isLight","documentElement","classList","add","threshold","rootMargin","section","observe"],"sources":["C:/Users/ASUS/Block_Drop_Game/hypertechgames-website/src/utils/navigation.js"],"sourcesContent":["export const handleActiveNavigation = () => {\n  const sections = document.querySelectorAll('section[id]');\n  const navLinks = document.querySelectorAll('a[href^=\"#\"]');\n  const contactSection = document.getElementById('contact');\n  \n  // Set initial active state for home\n  const homeLink = document.querySelector('a[href=\"#home\"]');\n  if (homeLink) {\n    homeLink.style.cssText = `\n      color: var(--primaryAccent) !important;\n      background: rgba(0, 245, 255, 0.1) !important;\n      transform: translateY(-2px) !important;\n      box-shadow: 0 4px 15px rgba(0, 245, 255, 0.3) !important;\n    `;\n  }\n  \n  const observer = new IntersectionObserver((entries) => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting) {\n        const id = entry.target.getAttribute('id');\n        \n        // Remove active styles from all links\n        navLinks.forEach(link => {\n          link.style.cssText = '';\n        });\n        \n        // Add active styles to current section link\n        const activeLink = document.querySelector(`a[href=\"#${id}\"]`);\n        if (activeLink) {\n          const isLight = document.documentElement.getAttribute('data-theme') === 'light';\n          if (isLight) {\n            activeLink.style.cssText = `\n              background: rgba(255, 255, 255, 0.1) !important;\n              box-shadow: 0 4px 15px rgba(255, 255, 255, 0.3) !important;\n              color: #ffffff !important;\n              transform: translateY(-2px) !important;\n            `;\n          } else {\n            activeLink.style.cssText = `\n              color: var(--primaryAccent) !important;\n              background: rgba(0, 245, 255, 0.1) !important;\n              transform: translateY(-2px) !important;\n              box-shadow: 0 4px 15px rgba(0, 245, 255, 0.3) !important;\n            `;\n          }\n        }\n        \n        // Trigger contact section animation\n        if (id === 'contact' && contactSection) {\n          contactSection.classList.add('animate');\n        }\n      }\n    });\n  }, {\n    threshold: 0.6,\n    rootMargin: '-20% 0px -20% 0px'\n  });\n\n  sections.forEach(section => observer.observe(section));\n};"],"mappings":"AAAA,OAAO,MAAMA,sBAAsB,GAAGA,CAAA,KAAM;EAC1C,MAAMC,QAAQ,GAAGC,QAAQ,CAACC,gBAAgB,CAAC,aAAa,CAAC;EACzD,MAAMC,QAAQ,GAAGF,QAAQ,CAACC,gBAAgB,CAAC,cAAc,CAAC;EAC1D,MAAME,cAAc,GAAGH,QAAQ,CAACI,cAAc,CAAC,SAAS,CAAC;;EAEzD;EACA,MAAMC,QAAQ,GAAGL,QAAQ,CAACM,aAAa,CAAC,iBAAiB,CAAC;EAC1D,IAAID,QAAQ,EAAE;IACZA,QAAQ,CAACE,KAAK,CAACC,OAAO,GAAG;AAC7B;AACA;AACA;AACA;AACA,KAAK;EACH;EAEA,MAAMC,QAAQ,GAAG,IAAIC,oBAAoB,CAAEC,OAAO,IAAK;IACrDA,OAAO,CAACC,OAAO,CAACC,KAAK,IAAI;MACvB,IAAIA,KAAK,CAACC,cAAc,EAAE;QACxB,MAAMC,EAAE,GAAGF,KAAK,CAACG,MAAM,CAACC,YAAY,CAAC,IAAI,CAAC;;QAE1C;QACAf,QAAQ,CAACU,OAAO,CAACM,IAAI,IAAI;UACvBA,IAAI,CAACX,KAAK,CAACC,OAAO,GAAG,EAAE;QACzB,CAAC,CAAC;;QAEF;QACA,MAAMW,UAAU,GAAGnB,QAAQ,CAACM,aAAa,CAAC,YAAYS,EAAE,IAAI,CAAC;QAC7D,IAAII,UAAU,EAAE;UACd,MAAMC,OAAO,GAAGpB,QAAQ,CAACqB,eAAe,CAACJ,YAAY,CAAC,YAAY,CAAC,KAAK,OAAO;UAC/E,IAAIG,OAAO,EAAE;YACXD,UAAU,CAACZ,KAAK,CAACC,OAAO,GAAG;AACvC;AACA;AACA;AACA;AACA,aAAa;UACH,CAAC,MAAM;YACLW,UAAU,CAACZ,KAAK,CAACC,OAAO,GAAG;AACvC;AACA;AACA;AACA;AACA,aAAa;UACH;QACF;;QAEA;QACA,IAAIO,EAAE,KAAK,SAAS,IAAIZ,cAAc,EAAE;UACtCA,cAAc,CAACmB,SAAS,CAACC,GAAG,CAAC,SAAS,CAAC;QACzC;MACF;IACF,CAAC,CAAC;EACJ,CAAC,EAAE;IACDC,SAAS,EAAE,GAAG;IACdC,UAAU,EAAE;EACd,CAAC,CAAC;EAEF1B,QAAQ,CAACa,OAAO,CAACc,OAAO,IAAIjB,QAAQ,CAACkB,OAAO,CAACD,OAAO,CAAC,CAAC;AACxD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}